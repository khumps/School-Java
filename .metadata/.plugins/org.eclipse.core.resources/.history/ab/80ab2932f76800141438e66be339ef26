/*
 * This class contains a variety of methods that can sort, copy, and analyze
 * statistical data.
 */

import java.util.ArrayList;

public class Statistics {

	/*
	 * returns a clone of a set of data
	 */
	public static double[] copyData(double[] data) {
		double[] copy = new double[data.length];
		for (int i = 0; i < data.length; i++) {
			copy[i] = data[i];
		}
		return copy;
	}

	/*
	 * Returns a clone of a part of an array of doubles from 
	 * index firstIndex to lastIndex
	 */
	private static double[] copyData(double[] data, int firstIndex,
			int lastIndex) {
		int j = 0;
		double[] dest = new double[data.length];
		for (int i = firstIndex; i < lastIndex + 1; i++) {
			dest[j] = data[i];
			j++;
		}
		return dest;
	}
	
	/*
	 * returns the sum of all values in a set of data
	 */
	public static double sum(double[] data) {
		double sum = 0;
		for (int i = 0; i < data.length; i++) {
			sum += data[i];
		}
		return sum;
	}

	/*
	 * Sorts a set of data
	 */
	public static double[] sortData(double[] data) {
		double[] sorted = copyData(data);
		for (int inner = 0; inner < sorted.length; inner++) {
			for (int outer = inner + 1; outer < sorted.length; outer++) {
				if (sorted[inner] > sorted[outer]) {
					double temp = sorted[inner];
					sorted[inner] = sorted[outer];
					sorted[outer] = temp;
				}
			}

		}
		return sorted;
	}

	/*
	 * Returns the mean of a set of data
	 */
	public static double mean(double[] data) {
		double mean = 0;
		for (int i = 0; i < data.length; i++) {
			mean += data[i];
		}
		return mean /= data.length;
	}

	/*
	 * Returns the median of a set of data
	 */
	public static double median(double[] data) {
		if (data.length == 0)
			return Double.NaN;
		double median = 0;
		double[] copy = sortData(data);
		if (copy.length % 2 == 0) {
			int findMedian = (copy.length / 2) - 1;
			int minMedian = (0 + findMedian);
			int maxMedian = (copy.length - findMedian) - 1;
			median = (copy[minMedian] + copy[maxMedian]) / 2;
			return median;
		}
		int findMedian = (copy.length / 2);
		return copy[findMedian];

	}

	/*
	 * Returns the median of a previously sorted set of data
	 */
	private static double medianSorted(double[] data) {
		if (data.length == 0)
			return Double.NaN;
		double median = 0;
		double[] copy = copyData(data);
		if (copy.length % 2 == 0) {
			int findMedian = (copy.length / 2) - 1;
			int minMedian = (0 + findMedian);
			int maxMedian = (copy.length - findMedian) - 1;
			median = (copy[minMedian] + copy[maxMedian]) / 2;
			return median;
		}
		int findMedian = (copy.length / 2);
		return copy[findMedian];

	}

	/*
	 * Converts an array to a string
	 */
	public static String arrayToString(double[] a) {
		String s = "[";
		int i;
		for (i = 0; i < a.length; i++) {
			s += a[i];
			if (i < a.length - 1)
				s += ", ";
		}
		s += "]";
		return s;
	}

	/*
	 * Returns the minimum value in a set of data
	 */
	public static double min(double[] data) {
		if (data.length == 0)
			return Double.NaN;
		double min = data[0];
		for (int i = 1; i < data.length; i++) {
			if (data[i] < min)
				min = data[i];
		}
		return min;
	}

	/*
	 * Returns the Maximum for a set of data
	 */
	public static double max(double[] data) {
		if (data.length == 0)
			return Double.NaN;
		double max = data[0];
		for (int i = 1; i < data.length; i++) {
			if (data[i] > max)
				max = data[i];
		}
		return max;
	}

	/*
	 * Returns the range of the data(Max - Min)
	 */
	public static double range(double[] data) {
		if (data.length == 0)
			return Double.NaN;
		double[] dataCopy = copyData(data);
		return max(dataCopy) - min(dataCopy);
	}

	/*
	 * Returns the Lower Quartile for data[]
	 */

	public static double lowerQuartile(double[] data) {
		if (data.length == 0)
			return Double.NaN;
		int medianIndex = 0;
		double[] copy = copyData(data);
		double median = median(copy);
		for (int i = 0; copy[i] < median; i++) {
			medianIndex = i;
		}
		double lowerQ = median(copyData(copy, 0, medianIndex));
		return lowerQ;

	}

	private static double lowerQuartileSorted(double[] data) {
		if (data.length == 0)
			return Double.NaN;
		int medianIndex = 0;
		double[] copy = copyData(data);
		double median = medianSorted(copy);
		for (int i = 0; copy[i] < median; i++) {
			medianIndex = i;
		}
		double lowerQ = medianSorted(copyData(copy, 0, medianIndex));
		return lowerQ;

	}

	/*
	 * Returns the Upper Quartile for data[]
	 */
	public static double upperQuartile(double[] data) {
		if (data.length == 0)
			return Double.NaN;
		int medianIndex = 0;
		double[] copy = copyData(data);
		double median = median(copy);
		for (int i = copy.length - 1; copy[i] > median; i--) {
			medianIndex = i;
		}
		double upperQ = median(copyData(copy, medianIndex, copy.length - 1));
		return upperQ;

	}

	private static double upperQuartileSorted(double[] data) {
		if (data.length == 0)
			return Double.NaN;
		int medianIndex = 0;
		double[] copy = copyData(data);
		double median = medianSorted(copy);
		for (int i = copy.length - 1; copy[i] > median; i--) {
			medianIndex = i;
		}
		double upperQ = medianSorted(copyData(copy, medianIndex,
				copy.length - 1));
		return upperQ;

	}

	public static double interquartileRange(double[] data) {
		return upperQuartile(data) - lowerQuartile(data);
	}

	private static double interquartileRangeSorted(double[] data) {
		return upperQuartileSorted(data) - lowerQuartileSorted(data);
	}

	/*
	 * Returns the mode(if any) for data[]
	 */
	public static ArrayList<Double> mode(double[] data) {
		double[] copy = sortData(data);
		ArrayList<ArrayList<Double>> values = new ArrayList<ArrayList<Double>>();
		ArrayList<Double> same = new ArrayList<Double>();
		ArrayList<Double> mode = new ArrayList<Double>();
		int i;
		int j;
		int noMode = 0;
		for (i = 0; i < copy.length;) {
			same.add(copy[i]);
			for (j = i + 1; j < copy.length && copy[i] == copy[j]; j++)
				same.add(copy[j]);
			values.add(new ArrayList<Double>(same));
			same.clear();
			i = j;
		}
		int freq = 0;
		for (i = 0; i < values.size(); i++) {
			if (values.get(i).size() > freq) {
				mode.clear();
				mode.add(values.get(i).get(0));
				freq = values.get(i).size();
			} else if (values.get(i).size() == freq) {
				mode.add(values.get(i).get(0));
				noMode++;
			}

		}
		if (noMode > values.size() / 2)
			return new ArrayList<Double>();

		return mode;
	}

	/*
	 * Returns the Standard Deviation for data[]
	 */
	public static double standardDeviation(double[] data) {
		double[] squared = new double[data.length];
		double mean = mean(data);
		for (int i = 0; i < squared.length; i++)
			squared[i] = (data[i] - mean) * (data[i] - mean);
		double devMean = sum(squared) / (squared.length - 1);
		return Math.sqrt(devMean);

	}

	/*
	 * Returns the Z-Score of the data point at data[index]
	 */
	public static double zScore(double[] data, int index) {
		return (data[index] - mean(data)) / standardDeviation(data);
	}

	public static ArrayList<Double> outliers(double[] data) {
		if (data.length < 6)
			return new ArrayList<Double>();
		double[] copy = sortData(data);
		ArrayList<Double> outliers = new ArrayList<Double>();
		double isOutlier = 1.5 * interquartileRangeSorted(copy);
		double lOutliers = lowerQuartileSorted(copy) - isOutlier;
		double uOutliers = upperQuartileSorted(copy) + isOutlier;
		for (int i = 0; i < data.length; i++) {
			if (data[i] < lOutliers || data[i] > uOutliers)
				outliers.add(data[i]);
		}

		return outliers;
	}

	public static void main(String[] args) {
		double[] test = { 1, 5, 6540, 56, 74, 56, 74, 1 };
		double[] test2 = new double[10000];
		for (int i = 0; i < test2.length; i++) {
			test2[i] = Math.random() * 100;
		}
		System.out.println(arrayToString(test));
		double[] copy = copyData(test);
		long start = System.nanoTime();
		mode(test2);
		long stop = System.nanoTime();
		System.out.println(mode(test));
		System.out.println(stop - start);
	}
}
