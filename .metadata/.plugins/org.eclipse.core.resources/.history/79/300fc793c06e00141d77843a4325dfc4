import javax.swing.JPanel;

public class GameOfLife extends JPanel {

	Board board;
	Board modifiedBoard;
	int generationNum = 0;

	public GameOfLife(int rows, int cols) {
		board = new Board(rows, cols);
		for(int i = 0; i < this.board.board.length; i++)
		{
			for(int j = 0; j < this.board.board[0].length; j++)
			{
				board.board[i][j] = 0;
			
		}
	}
	}
	
	public GameOfLife(int size) {
		board = new Board(size);
	}
	
	public GameOfLife(int[][] grid)
	{
		board = new Board(grid);
	}

	public int getGenerationNum() {
		return generationNum;
	}

	public boolean isAlive(int row, int col) {
		if (board.isValid(row, col))
			if (board.board[row][col] == 1)
			{
				return true;
			}
		return false;
	}

	public int countNeighbors(int row, int col) {
		int numNeighbors = 0;
		if(this.isAlive(row, col))
			numNeighbors--;
		for (int i = row - 1; i < row + 2; i ++) {
			for (int j = col - 1; j < col + 2; j++) {
				if (this.isAlive(i, j))
					{
					numNeighbors++;
					}
			}
		}
		return numNeighbors;
	}

	private boolean willLive(int row, int col) {
		if (this.isAlive(row, col)) {
			if (this.countNeighbors(row, col) < 2 || this.countNeighbors(row, col) > 3)
				{
				return false;
				}
			return true;
		}

		if (this.countNeighbors(row, col) == 3)
		{
			return true;
		}
		return false;
	}
	
	public String toString()
	{
	return board.toString();
	}
	
	public int getCell(int row, int col)
	{
		return board.board[row][col];
	}
	
	public void nextGeneration()
	{
		modifiedBoard = this.board.copyBoard();
		for(int i = 0; i < this.board.board.length; i++)
		{
			for(int j = 0; j < this.board.board[0].length; j++)
			{
				if(this.willLive(i, j) == true)
					this.modifiedBoard.board[i][j] = 1;
				if(this.willLive(i, j) == false)
					this.modifiedBoard.board[i][j] = 0;
			}
		}
		this.board = new Board(modifiedBoard.board);
		System.out.println(toString(modifiedBoard.board));
		generationNum++;
		//System.out.println(board.toString());
	}
	
	public static String toString(int[][] board)
	{
		String str = "";
		for(int i = 0; i < board.length; i++)
		{
			for(int j = 0; j < board[0].length; j++)
			{
				if(board[i][j] == 0)
				str += " - ";
				else str += " * ";
			
		}
			str += "\n";
		}
		return str;
	}
	public static void main(String[] args)
	{
		GameOfLife game = new GameOfLife(5);
		//for(int i = 0; i < 100; i++)	
		//game.board.setTile((int)(Math.random() * 5), (int)(Math.random() * 5), (int)(Math.random() * 2));
		game.board.setTile(1, 1, 1);
		game.board.setTile(0, 2, 1);
		game.board.setTile(1, 3, 1);
		game.board.setTile(1, 0, 1);
		game.board.setTile(1, 2, 1);
		System.out.println(game.toString());
		//System.out.println("numNeighbors" + game.countNeighbors(1, 2));
		//System.out.println(game.board.getTile(0, 1));
		game.nextGeneration();
		//System.out.println(game.toString());
		game.nextGeneration();
		//System.out.println(game.toString());
	}

}
