import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.*;
import java.util.Hashtable;
public class Display extends JFrame implements ActionListener, MouseListener, ChangeListener{

	private static final long serialVersionUID = 6418621600276097961L;
	boolean isRunning = false;
	int sliderMin = 0;
	int sliderMax = 100;
	int sliderDefault = 50;
	int timerLength = 100;
	JMenuBar menu = new JMenuBar();
	JPanel buttonBoard = new JPanel();
  	JMenuItem grid = new JMenuItem("Show Grid");
	JMenuItem play = new JMenuItem("Start");
	JMenuItem nextGen = new JMenuItem("Next Generation");
	JMenuItem clear = new JMenuItem("Clear Board");
	Timer timer = new Timer(timerLength, this);
	LifeBoard game = new LifeBoard();
	JLabel genNum = new JLabel(Integer.toString((game.life.getGenerationNum())));
	JSlider speed = new JSlider(JSlider.HORIZONTAL, sliderMin, sliderMax, sliderDefault );
	
	@SuppressWarnings("unchecked")
	Display()
	{
		this.setDefaultCloseOperation(EXIT_ON_CLOSE);

		speed.setMajorTickSpacing(250);
		speed.setMinorTickSpacing(125);
		speed.setPaintTicks(true);
		//Hashtable code from oracle tutorial
		@SuppressWarnings("rawtypes")
		Hashtable labelTable = new Hashtable();
		labelTable.put( new Integer(sliderMax), new JLabel("Fast"));
		labelTable.put( new Integer(sliderMin), new JLabel("Stop"));
		speed.setLabelTable( labelTable );

		speed.setPaintLabels(true);
		speed.addChangeListener(this);
	game.addMouseListener(this);
	this.add(game);
	//timer.setRepeats(true);
	//timer.addActionListener(this);
	timer.setActionCommand("timer");
	Dimension button = new Dimension(100,30);
	int borderWidth = 1;
	int boardSize = 50;
	boolean isRunning = false;
	this.setPreferredSize(new Dimension(10 * boardSize, 10 * boardSize));
    grid.setSize(button);
	grid.addActionListener(this);
	grid.setActionCommand("showGrid");
	play.setSize(button);
	play.addActionListener(this);
	play.setActionCommand("play");
	nextGen.addActionListener(this);
	nextGen.setActionCommand("next");
	clear.setSize(button);
	clear.addActionListener(this);
	clear.setActionCommand("clear");
	genNum.setSize(button);
	menu.add(grid);
	menu.add(play);
	menu.add(nextGen);
	menu.add(clear);
	menu.add(speed);
	menu.add(genNum);
	this.setJMenuBar(menu);
	this.pack();
	}
	public static void main(String[] args)
	{
		Display test = new Display();
		test.setVisible(true);
	}
	public void mouseClicked(MouseEvent e) {
	}
	public void mouseEntered(MouseEvent arg0) {
	}
	public void mouseExited(MouseEvent arg0) {
	}
	public void mousePressed(MouseEvent e) {
		int x = (e.getX() + LifeBoard.inset.left) / game.boxSize;
		int y = ((e.getY() + LifeBoard.inset.top) / game.boxSize);
		if (x < game.boardSize && x > -1 && y < game.boardSize && y > -1) {
			System.out.println(x + " " + y);
			if (game.life.getBoard().board[x][y] == 0)
				game.life.getBoard().board[x][y] = 1;
			else
				game.life.getBoard().board[x][y] = 0;
			this.repaint();
		}
	}

	public void mouseReleased(MouseEvent arg0) {
	}
	public void actionPerformed(ActionEvent e) {

		String command = e.getActionCommand();
		if (command.equals("play")) {
			
			if(isRunning)
			{
				isRunning = false;
				play.setText("Start");
				timer.stop();
			}
				
			else
			{
				isRunning = true;
				play.setText("Stop");
				timer.start();
				System.out.println("test");
			}
		}
		if (command.equals("next")) {
			genNum.setText(Integer.toString(game.life.getGenerationNum()));
			game.life.nextGeneration();
			this.repaint();
		}
		if(command.equals("timer"))
		{
			
			game.life.nextGeneration();
			genNum.setText(Integer.toString(game.life.getGenerationNum()));
			this.repaint();
			
		}
		if(command.equals("clear"))
		{
			genNum.setText("0");
			game.life = new GameOfLife(game.boardSize);
		
		this.repaint();
		}
      		if(command.equals("showGrid"))
		{
              if(game.showGrid)
              game.showGrid = false;
              else game.showGrid = true;
		this.repaint();
		}
	}

	public void stateChanged(ChangeEvent f) {
		JSlider source = (JSlider) f.getSource();
		if(speed.getValueIsAdjusting())
		{
		if(isRunning)
		{
		timerLength = (sliderMax - source.getValue()) * 10;
		timer.stop();
		timer.setDelay(timerLength);
		timer.start();
		}
		if(timerLength == sliderMax * 10)
			timer.stop();
		
	}
	}
}
