import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;

import javax.swing.*;

@SuppressWarnings("serial")
public class Display extends JFrame implements ActionListener {
	int borderWidth = 1;
	static int boardSize = 50;
	static boolean isRunning = false;
	private static GameOfLife life = new GameOfLife(boardSize);
	final static JLabel genNum = new JLabel("" + life.getGenerationNum());
	final static ArrayList<JButton> cells = new ArrayList<JButton>();
	Display() {
		

		this.setTitle("The Game of Life");
		this.setVisible(true);
		JButton prevGen = new JButton();
		JButton nextGen = new JButton();
		JTextField gen = new JTextField();
		JButton clear = new JButton();
		JButton genFive = new JButton();
		final JButton run = new JButton();
		run.setSize(150, 30);
		run.setLocation(400, 20);
		run.setText("Next Generation");
		run.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent b)
			{
				if(isRunning == false)
				{
					isRunning = true;
				run.setText("Start");
				}
				if(isRunning == true)
				{
					isRunning = false;
				run.setText("Start");
				}
				
					
			}
		});
		JPanel background = new JPanel();
		background.setBackground(Color.WHITE);
		JPanel game = new JPanel();
		background.add(game);
		GridLayout grid = new GridLayout(boardSize, boardSize, 0, 0);
		game.setLayout(grid);
		for (int i = 0; i < boardSize * boardSize; i++) {
			final int row = (i / boardSize);
			final int col = i % boardSize;
			final JButton cell = new JButton();
			cell.setBorder(BorderFactory.createMatteBorder(borderWidth, 1,
					borderWidth, borderWidth, Color.BLACK));
			game.add(cell);
			cells.add(cell);
			cell.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					if (life.isAlive(row, col)) {
						life.getBoard().setTile(row, col, 0);
						cell.setBackground(new JButton().getBackground());
					}

					else {
						life.getBoard().setTile(row, col, 1);
						cell.setBackground(Color.GREEN);
					}

				}

			});
		}
		game.setLocation(120, 100);
		game.setSize(755, 750);
		background.setLayout(null);

		genNum.setSize(50, 30);
		prevGen.setSize(150, 30);
		prevGen.setLocation(145, 20);
		prevGen.setText("Previous Generation");
		nextGen.setSize(150, 30);
		nextGen.setLocation(300, 20);
		nextGen.setText("Next Generation");
		nextGen.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent f) {
				life.nextGeneration();
				for (int i = 0; i < life.getBoard().board.length; i++) {
					for (int j = 0; j < life.getBoard().board[0].length; j++) {
						if (life.isAlive(i, j)) {
							cells.get((i * boardSize) + j).setBackground(
									Color.GREEN);
						}

						else {
							cells.get((i * boardSize) + j).setBackground(
									new JButton().getBackground());
							genNum.setText("" + life.getGenerationNum());
						}
					}
				}

			}
		});
		clear.setSize(125, 30);
		clear.setLocation(500, 20);
		clear.setText("Clear");
		clear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent f) {
				for (int i = 0; i < cells.size(); i++)
					cells.get(i).setBackground(new JButton().getBackground());
				life.getBoard().clear();
			}

		});
		genFive.setSize(200, 30);
		genFive.setLocation(630, 20);
		genFive.setText("Plus Five Generations");
		genFive.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent g) {
				boolean play = false;
				play = true;

				// while(play)
				{
					for (int k = 0; k < 5; k++) {
						life.nextGeneration();
						for (int i = 0; i < life.getBoard().board.length; i++) {
							for (int j = 0; j < life.getBoard().board[0].length; j++) {
								if (life.isAlive(i, j)) {
									cells.get((i * boardSize) + j)
											.setBackground(Color.GREEN);
								}

								else {
									cells.get((i * boardSize) + j)
											.setBackground(
													new JButton()
															.getBackground());
									genNum.setText("" + life.getGenerationNum());
								}
							}
						}

					}
				}
			}

		});
		this.add(prevGen);
		this.add(nextGen);
		this.add(clear);
		this.add(genFive);
		this.add(run);
		this.add(genNum);

		this.add(background);

	}

	public static void main(String[] args) {
		Display test = new Display();
		test.setSize(1000, 1000);
		while(isRunning)
		{
			life.nextGeneration();
			for (int i = 0; i < life.getBoard().board.length; i++) {
				for (int j = 0; j < life.getBoard().board[0].length; j++) {
					if (life.isAlive(i, j)) {
						cells.get((i * boardSize) + j).setBackground(
								Color.GREEN);
					}

					else {
						cells.get((i * boardSize) + j).setBackground(new JButton().getBackground());
						genNum.setText("" + life.getGenerationNum());
					}
				}
			}
		}

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		
	}
}